/*
This Source Code Form is subject to the terms of the Mozilla Public
License, v. 2.0. If a copy of the MPL was not distributed with this
file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

#include "main.h"

#include "util/util.hpp"

// This occurs as soon as the program starts.
void initialize() {
  pros::delay(300);

  imu.reset();
  pros::delay(2000);
  master.rumble(".");

  reset_trackers();
  reset_odom();

  set_pid_defaults();

  pros::lcd::initialize();
  pros::lcd::set_background_color(255, 110, 199);  // ez pink

  print_path_for_python(
      inject_points({{{0, 24}, LOOK_AT_TARGET_FWD},
                     {{24, 24}, HOLD_ANGLE, 60},
                     {{24, 0}, HOLD_ANGLE},
                     {{0, 0}, FAST_MOVE_REV}}));
}

// Runs while the robot is in disabled at on a competition.
void disabled() {}

// Runs after initialize(), and before autonomous when connected to a competition.
void competition_initialize() {}

// Runs the user autonomous code.
void autonomous() {
  reset_trackers();
  reset_odom();
  reset_pid_targets();
  drive_brake(MOTOR_BRAKE_HOLD);
  /*

  injected_pure_pursuit(
      {{{-6, 24, 50}, LOOK_AT_TARGET_FWD},
       {{36, 24, 50}, HOLD_ANGLE, 60},
       {{36, 18, 50}, HOLD_ANGLE},
       {{0, 0, 0}, FAST_MOVE_REV}});

  pp_wait_until(2);
  set_intake(127);
  pp_wait_until(3);
  set_intake(0);

  wait_drive();
  */
  injected_pure_pursuit({{{0, 24}, HOLD_ANGLE},
                         {{24, 24}, HOLD_ANGLE},
                         {{24, 0}, HOLD_ANGLE},
                         {{0, 0}, HOLD_ANGLE}});
  wait_drive();

  pure_pursuit({
      {{0.0, 0.0, 0}, HOLD_ANGLE},
      {{0.11512249690072453, 0.8494864948364265, 0}, HOLD_ANGLE},
      {{0.23151404996888292, 1.6973931914803968, 0}, HOLD_ANGLE},
      {{0.3504038323789179, 2.542187141046609, 0}, HOLD_ANGLE},
      {{0.4730112478321824, 3.3823420376259166, 0}, HOLD_ANGLE},
      {{0.60054099962523, 4.216341496454091, 0}, HOLD_ANGLE},
      {{0.7341779584819067, 5.0426823830700584, 0}, HOLD_ANGLE},
      {{0.875081778906217, 5.859878202083853, 0}, HOLD_ANGLE},
      {{1.0243812257246945, 6.666462548111951, 0}, HOLD_ANGLE},
      {{1.1831681866024426, 7.460992614517518, 0}, HOLD_ANGLE},
      {{1.3524913622140653, 8.242052748174375, 0}, HOLD_ANGLE},
      {{1.5333496429505447, 9.008258030946855, 0}, HOLD_ANGLE},
      {{1.7266851990227912, 9.758257861349263, 0}, HOLD_ANGLE},
      {{1.9333763290288197, 10.490739503320713, 0}, HOLD_ANGLE},
      {{2.154230129915622, 11.204431563603777, 0}, HOLD_ANGLE},
      {{2.3899750682204206, 11.898107355190465, 0}, HOLD_ANGLE},
      {{2.641253547966576, 12.5705881019807, 0}, HOLD_ANGLE},
      {{2.9086145840962607, 13.220745939402466, 0}, HOLD_ANGLE},
      {{3.192506701371249, 13.847506667401623, 0}, HOLD_ANGLE},
      {{3.4932711868519375, 14.449852215966764, 0}, HOLD_ANGLE},
      {{3.8111358290339967, 15.026822789158748, 0}, HOLD_ANGLE},
      {{4.146209278227756, 15.577518661318978, 0}, HOLD_ANGLE},
      {{4.498476160647094, 16.10110160849677, 0}, HOLD_ANGLE},
      {{4.867793072871916, 16.59679596884086, 0}, HOLD_ANGLE},
      {{5.253885573905068, 17.063889337347227, 0}, HOLD_ANGLE},
      {{5.656346279108796, 17.501732912489633, 0}, HOLD_ANGLE},
      {{6.074634144128906, 17.909741524384494, 0}, HOLD_ANGLE},
      {{6.50807500784465, 18.28739338573966, 0}, HOLD_ANGLE},
      {{6.955863441857095, 18.634229617389323, 0}, HOLD_ANGLE},
      {{7.417065930564457, 18.949853609226544, 0}, HOLD_ANGLE},
      {{7.890625381051206, 19.233930284356262, 0}, HOLD_ANGLE},
      {{8.375366936469767, 19.48618533891219, 0}, HOLD_ANGLE},
      {{8.870005040983045, 19.706404531897928, 0}, HOLD_ANGLE},
      {{9.373151679339927, 19.894433098410257, 0}, HOLD_ANGLE},
      {{9.88332569044624, 20.050175355569912, 0}, HOLD_ANGLE},
      {{10.398963032516916, 20.173594563427915, 0}, HOLD_ANGLE},
      {{10.918427858153112, 20.264713093155834, 0}, HOLD_ANGLE},
      {{11.440024241520812, 20.323612942204907, 0}, HOLD_ANGLE},
      {{11.962008387173999, 20.350436621180034, 0}, HOLD_ANGLE},
      {{12.48260114133271, 20.345388420367772, 0}, HOLD_ANGLE},
      {{13.000000621852614, 20.308736045715843, 0}, HOLD_ANGLE},
      {{13.512394782853024, 20.240812595182383, 0}, HOLD_ANGLE},
      {{14.017973734026672, 20.14201882740274, 0}, HOLD_ANGLE},
      {{14.514941642936883, 20.012825656225203, 0}, HOLD_ANGLE},
      {{15.001528060892579, 19.85377678751161, 0}, HOLD_ANGLE},
      {{15.475998528940059, 19.66549139932449, 0}, HOLD_ANGLE},
      {{15.936664339674968, 19.44866675382034, 0}, HOLD_ANGLE},
      {{16.381891352416293, 19.204080619360504, 0}, HOLD_ANGLE},
      {{16.81010778317449, 18.93259337496776, 0}, HOLD_ANGLE},
      {{17.21981091610551, 18.635149666623832, 0}, HOLD_ANGLE},
      {{17.60957270904804, 18.312779486227583, 0}, HOLD_ANGLE},
      {{17.978044291552305, 17.966598549397126, 0}, HOLD_ANGLE},
      {{18.32395937878909, 17.597807857652345, 0}, HOLD_ANGLE},
      {{18.646136648170952, 17.20769234367913, 0}, HOLD_ANGLE},
      {{18.94348114676778, 16.797618515051337, 0}, HOLD_ANGLE},
      {{19.214984816074324, 16.36903103155525, 0}, HOLD_ANGLE},
      {{19.459726235896103, 15.923448173606014, 0}, HOLD_ANGLE},
      {{19.67686970068102, 15.462456183565374, 0}, HOLD_ANGLE},
      {{19.86566374927479, 14.987702487396977, 0}, HOLD_ANGLE},
      {{20.025439272686835, 14.500887830319936, 0}, HOLD_ANGLE},
      {{20.15560732402232, 14.003757386208909, 0}, HOLD_ANGLE},
      {{20.25565675039996, 13.498090925709388, 0}, HOLD_ANGLE},
      {{20.325151758697977, 12.985692151681912, 0}, HOLD_ANGLE},
      {{20.36372951573567, 12.468377331996406, 0}, HOLD_ANGLE},
      {{20.37109786949081, 11.94796337826999, 0}, HOLD_ANGLE},
      {{20.34703326174972, 11.426255534363982, 0}, HOLD_ANGLE},
      {{20.291378884826404, 10.905034849910678, 0}, HOLD_ANGLE},
      {{20.20404311635327, 10.386045621518873, 0}, HOLD_ANGLE},
      {{20.084998247339307, 9.870982987416811, 0}, HOLD_ANGLE},
      {{19.934279500405026, 9.361480860061238, 0}, HOLD_ANGLE},
      {{19.751984317996758, 8.859100375721384, 0}, HOLD_ANGLE},
      {{19.53827188505949, 8.365319030406573, 0}, HOLD_ANGLE},
      {{19.293362837630045, 7.881520658026048, 0}, HOLD_ANGLE},
      {{19.017539098528935, 7.408986389732984, 0}, HOLD_ANGLE},
      {{18.71114377409346, 6.948886713484933, 0}, HOLD_ANGLE},
      {{18.37458104189844, 6.50227473049731, 0}, HOLD_ANGLE},
      {{18.008315958717496, 6.070080681081672, 0}, HOLD_ANGLE},
      {{17.61287412052152, 5.653107786991929, 0}, HOLD_ANGLE},
      {{17.188841111901414, 5.252029431516399, 0}, HOLD_ANGLE},
      {{16.736861690632708, 4.867387672820579, 0}, HOLD_ANGLE},
      {{16.25763866376197, 4.499593061116594, 0}, HOLD_ANGLE},
      {{15.751931424096014, 4.148925706728024, 0}, HOLD_ANGLE},
      {{15.220554129755955, 3.8155375245994225, 0}, HOLD_ANGLE},
      {{14.664373523921165, 3.4994555617692757, 0}, HOLD_ANGLE},
      {{14.084306406415033, 3.2005862982061886, 0}, HOLD_ANGLE},
      {{13.48131678276603, 2.9187207985361603, 0}, HOLD_ANGLE},
      {{12.856412729235553, 2.653540582804255, 0}, HOLD_ANGLE},
      {{12.210643023512795, 2.404624078658468, 0}, HOLD_ANGLE},
      {{11.54509359988628, 2.1714535152581442, 0}, HOLD_ANGLE},
      {{10.860883894351078, 1.9534221207360973, 0}, HOLD_ANGLE},
      {{10.15916314904417, 1.7498414900298065, 0}, HOLD_ANGLE},
      {{9.441106746475379, 1.559948998101385, 0}, HOLD_ANGLE},
      {{8.70791264221195, 1.3829151446673373, 0}, HOLD_ANGLE},
      {{7.960797960073784, 1.2178507301668642, 0}, HOLD_ANGLE},
      {{7.200995806707554, 1.0638137783637087, 0}, HOLD_ANGLE},
      {{6.429752352939599, 0.919816138208827, 0}, HOLD_ANGLE},
      {{5.648324217957158, 0.7848297158664783, 0}, HOLD_ANGLE},
      {{4.857976179606634, 0.6577923065850154, 0}, HOLD_ANGLE},
      {{4.05997922045139, 0.5376130148335645, 0}, HOLD_ANGLE},
      {{3.255608905258418, 0.42317726929604566, 0}, HOLD_ANGLE},
      {{2.446144071851449, 0.31335145640796047, 0}, HOLD_ANGLE},
      {{1.6328658043341788, 0.20698721166895265, 0}, HOLD_ANGLE},
      {{0.8170566460728832, 0.10292542154271804, 0}, HOLD_ANGLE},
      {{0.0, 0.0, 0}, HOLD_ANGLE},
  });
  wait_drive();
}

// Runs the operator control code.
void opcontrol() {
  // Drive brake, this is preference
  drive_brake(MOTOR_BRAKE_HOLD);

  while (true) {
    flywheel_opcontrol();
    joystick_control();
    indexer_opcontrol();
    intake_opcontrol();

    pros::delay(DELAY_TIME);
  }
}