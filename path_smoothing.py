import math

# reference value 0.1, 0.3, 0.00001
def smoothing(path, weight_data, weight_smooth, tolerance):

    smoothed_path = path.copy()
    change = tolerance

    while change >= tolerance:
        change = 0.0

        for i in range(1, len(path)-1):

            for j in range(0, len(path[i])):
                aux = smoothed_path[i][j]

                smoothed_path[i][j] += weight_data * (path[i][j] - smoothed_path[i][j]) + weight_smooth * (
                    smoothed_path[i-1][j] + smoothed_path[i+1][j] - (2.0 * smoothed_path[i][j]))
                change += abs(aux - smoothed_path[i][j])

    return smoothed_path


def sgn(num):
    if num >= 0:
        return 1
    else:
        return -1


def findMinAngle(absTargetAngle, currentHeading):

    minAngle = absTargetAngle - currentHeading

    if minAngle > 180 or minAngle < -180:
        minAngle = -1 * sgn(minAngle) * (360 - abs(minAngle))

    return minAngle


def autoSmooth(path, maxAngle, b):
    currentMax = 0
    param = b
    new_path = path
    firstLoop = True

    counter = 0

    while (currentMax >= maxAngle or firstLoop == True):  # and counter <= 15 :

        param += 0.01
        firstLoop = False

        # counter += 1
        # print('this is the {} iteration'.format(counter))

        new_path = smoothing(path, 0.1, param, 0.1)
        currentMax = 0

        for i in range(1, len(new_path)-2):
            angle1 = math.atan2(
                new_path[i][1] - new_path[i-1][1], new_path[i][0] - new_path[i-1][0]) * 180/math.pi
            if angle1 < 0:
                angle1 += 360
            angle2 = math.atan2(
                new_path[i+1][1] - new_path[i][1], new_path[i+1][0] - new_path[i][0]) * 180/math.pi
            if angle2 < 0:
                angle2 += 360

            if abs(findMinAngle(angle2, angle1)) > currentMax:
                currentMax = abs(findMinAngle(angle2, angle1))

    return new_path


pathh = [[0.000000, 0.000000]
,[0.000000, 1.000000]
,[0.000000, 2.000000]
,[0.000000, 3.000000]
,[0.000000, 4.000000]
,[0.000000, 5.000000]
,[0.000000, 6.000000]
,[0.000000, 7.000000]
,[0.000000, 8.000000]
,[0.000000, 9.000000]
,[0.000000, 10.000000]
,[0.000000, 11.000000]
,[0.000000, 12.000000]
,[0.000000, 13.000000]
,[0.000000, 14.000000]
,[0.000000, 15.000000]
,[0.000000, 16.000000]
,[0.000000, 17.000000]
,[0.000000, 18.000000]
,[0.000000, 19.000000]
,[0.000000, 20.000000]
,[0.000000, 21.000000]
,[0.000000, 22.000000]
,[0.000000, 23.000000]
,[0.000000, 24.000000]
,[0.000000, 24.000000]
,[0.000000, 24.000000]
,[1.000000, 24.000000]
,[2.000000, 24.000000]
,[3.000000, 24.000000]
,[4.000000, 24.000000]
,[5.000000, 24.000000]
,[6.000000, 24.000000]
,[7.000000, 24.000000]
,[8.000000, 24.000000]
,[9.000000, 24.000000]
,[10.000000, 24.000000]
,[11.000000, 24.000000]
,[12.000000, 24.000000]
,[13.000000, 24.000000]
,[14.000000, 24.000000]
,[15.000000, 24.000000]
,[16.000000, 24.000000]
,[17.000000, 24.000000]
,[18.000000, 24.000000]
,[19.000000, 24.000000]
,[20.000000, 24.000000]
,[21.000000, 24.000000]
,[22.000000, 24.000000]
,[23.000000, 24.000000]
,[24.000000, 24.000000]
,[24.000000, 24.000000]
,[24.000000, 24.000000]
,[24.000000, 23.000000]
,[24.000000, 22.000000]
,[24.000000, 21.000000]
,[24.000000, 20.000000]
,[24.000000, 19.000000]
,[24.000000, 18.000000]
,[24.000000, 17.000000]
,[24.000000, 16.000000]
,[24.000000, 15.000000]
,[24.000000, 14.000000]
,[24.000000, 13.000000]
,[24.000000, 12.000000]
,[24.000000, 11.000000]
,[24.000000, 10.000000]
,[24.000000, 9.000000]
,[24.000000, 8.000000]
,[24.000000, 7.000000]
,[24.000000, 6.000000]
,[24.000000, 5.000000]
,[24.000000, 4.000000]
,[24.000000, 3.000000]
,[24.000000, 2.000000]
,[24.000000, 1.000000]
,[24.000000, 0.000000]
,[24.000000, 0.000000]
,[24.000000, 0.000000]
,[23.000000, 0.000000]
,[22.000000, 0.000000]
,[21.000000, 0.000000]
,[20.000000, 0.000000]
,[19.000000, 0.000000]
,[18.000000, 0.000000]
,[17.000000, 0.000000]
,[16.000000, 0.000000]
,[15.000000, 0.000000]
,[14.000000, 0.000000]
,[13.000000, 0.000000]
,[12.000000, 0.000000]
,[11.000000, 0.000000]
,[10.000000, 0.000000]
,[9.000000, 0.000000]
,[8.000000, 0.000000]
,[7.000000, 0.000000]
,[6.000000, 0.000000]
,[5.000000, 0.000000]
,[4.000000, 0.000000]
,[3.000000, 0.000000]
,[2.000000, 0.000000]
,[1.000000, 0.000000]
,[0.000000, 0.000000]
,[0.000000, 0.000000]]



# covert to c++ 2d array format
def convert (path):
    length = 0
    print('pure_pursuit({')
    for i in range (0, len(path)):
        length += 1
        print('{{',path[i][0],',', path[i][1],', 0}, HOLD_ANGLE},')
    print('});')
    print('\n')


convert(autoSmooth(pathh, 10, 0.0175))